import { ElementRef, IterableDiffers, NgZone, SimpleChanges, TrackByFunction } from '@angular/core';
import { FooterHeightFn, HeaderFn, HeaderHeightFn, ItemHeightFn } from '@ionic/core';
import { VirtualFooter } from './virtual-footer';
import { VirtualHeader } from './virtual-header';
import { VirtualItem } from './virtual-item';
import * as ɵngcc0 from '@angular/core';
export declare interface IonVirtualScroll {
    /**
     * It is important to provide this
     * if virtual item height will be significantly larger than the default
     * The approximate height of each virtual item template's cell.
     * This dimension is used to help determine how many cells should
     * be created when initialized, and to help calculate the height of
     * the scrollable area. This height value can only use `px` units.
     * Note that the actual rendered size of each cell comes from the
     * app's CSS, whereas this approximation is used to help calculate
     * initial dimensions before the item has been rendered.
     */
    approxItemHeight: number;
    /**
     * The approximate height of each header template's cell.
     * This dimension is used to help determine how many cells should
     * be created when initialized, and to help calculate the height of
     * the scrollable area. This height value can only use `px` units.
     * Note that the actual rendered size of each cell comes from the
     * app's CSS, whereas this approximation is used to help calculate
     * initial dimensions before the item has been rendered.
     */
    approxHeaderHeight: number;
    /**
     * The approximate width of each footer template's cell.
     * This dimension is used to help determine how many cells should
     * be created when initialized, and to help calculate the height of
     * the scrollable area. This height value can only use `px` units.
     * Note that the actual rendered size of each cell comes from the
     * app's CSS, whereas this approximation is used to help calculate
     * initial dimensions before the item has been rendered.
     */
    approxFooterHeight: number;
    /**
     * Section headers and the data used within its given
     * template can be dynamically created by passing a function to `headerFn`.
     * For example, a large list of contacts usually has dividers between each
     * letter in the alphabet. App's can provide their own custom `headerFn`
     * which is called with each record within the dataset. The logic within
     * the header function can decide if the header template should be used,
     * and what data to give to the header template. The function must return
     * `null` if a header cell shouldn't be created.
     */
    headerFn?: HeaderFn;
    /**
     * Section footers and the data used within its given
     * template can be dynamically created by passing a function to `footerFn`.
     * The logic within the footer function can decide if the footer template
     * should be used, and what data to give to the footer template. The function
     * must return `null` if a footer cell shouldn't be created.
     */
    footerFn?: HeaderFn;
    /**
     * The data that builds the templates within the virtual scroll.
     * It's important to note that when this data has changed, then the
     * entire virtual scroll is reset, which is an expensive operation and
     * should be avoided if possible.
     */
    items?: any[];
    /**
     * An optional function that maps each item within their height.
     * When this function is provided, heavy optimizations and fast path can be taked by
     * `ion-virtual-scroll` leading to massive performance improvements.
     *
     * This function allows to skip all DOM reads, which can be Doing so leads
     * to massive performance
     */
    itemHeight?: ItemHeightFn;
    /**
     * An optional function that maps each item header within their height.
     */
    headerHeight?: HeaderHeightFn;
    /**
     * An optional function that maps each item footer within their height.
     */
    footerHeight?: FooterHeightFn;
    /**
     * Same as `ngForTrackBy` which can be used on `ngFor`.
     */
    trackBy: TrackByFunction<any>;
    /**
     * This method marks the tail the items array as dirty, so they can be re-rendered.  It's equivalent to calling:  ```js    * virtualScroll.checkRange(lastItemLen, items.length - lastItemLen);    * ```
     */
    'checkEnd': () => void;
    /**
     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as dirty any time the content or their style changes.  The subset of items to be updated can are specifing by an offset and a length.
     */
    'checkRange': (offset: number, len?: number) => void;
    /**
     * Returns the position of the virtual item at the given index.
     */
    'positionForItem': (index: number) => Promise<number>;
}
export declare class IonVirtualScroll {
    private z;
    private iterableDiffers;
    private differ?;
    private el;
    private refMap;
    itmTmp: VirtualItem;
    hdrTmp: VirtualHeader;
    ftrTmp: VirtualFooter;
    constructor(z: NgZone, iterableDiffers: IterableDiffers, elementRef: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    private nodeRender;
    private getComponent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonVirtualScroll, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonVirtualScroll, "ion-virtual-scroll", never, { "approxItemHeight": "approxItemHeight"; "approxHeaderHeight": "approxHeaderHeight"; "approxFooterHeight": "approxFooterHeight"; "headerFn": "headerFn"; "footerFn": "footerFn"; "items": "items"; "itemHeight": "itemHeight"; "headerHeight": "headerHeight"; "footerHeight": "footerHeight"; "trackBy": "trackBy"; }, {}, ["itmTmp", "hdrTmp", "ftrTmp"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1zY3JvbGwuZC50cyIsInNvdXJjZXMiOlsidmlydHVhbC1zY3JvbGwuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJdGVyYWJsZURpZmZlcnMsIE5nWm9uZSwgU2ltcGxlQ2hhbmdlcywgVHJhY2tCeUZ1bmN0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb290ZXJIZWlnaHRGbiwgSGVhZGVyRm4sIEhlYWRlckhlaWdodEZuLCBJdGVtSGVpZ2h0Rm4gfSBmcm9tICdAaW9uaWMvY29yZSc7XG5pbXBvcnQgeyBWaXJ0dWFsRm9vdGVyIH0gZnJvbSAnLi92aXJ0dWFsLWZvb3Rlcic7XG5pbXBvcnQgeyBWaXJ0dWFsSGVhZGVyIH0gZnJvbSAnLi92aXJ0dWFsLWhlYWRlcic7XG5pbXBvcnQgeyBWaXJ0dWFsSXRlbSB9IGZyb20gJy4vdmlydHVhbC1pdGVtJztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJb25WaXJ0dWFsU2Nyb2xsIHtcbiAgICAvKipcbiAgICAgKiBJdCBpcyBpbXBvcnRhbnQgdG8gcHJvdmlkZSB0aGlzXG4gICAgICogaWYgdmlydHVhbCBpdGVtIGhlaWdodCB3aWxsIGJlIHNpZ25pZmljYW50bHkgbGFyZ2VyIHRoYW4gdGhlIGRlZmF1bHRcbiAgICAgKiBUaGUgYXBwcm94aW1hdGUgaGVpZ2h0IG9mIGVhY2ggdmlydHVhbCBpdGVtIHRlbXBsYXRlJ3MgY2VsbC5cbiAgICAgKiBUaGlzIGRpbWVuc2lvbiBpcyB1c2VkIHRvIGhlbHAgZGV0ZXJtaW5lIGhvdyBtYW55IGNlbGxzIHNob3VsZFxuICAgICAqIGJlIGNyZWF0ZWQgd2hlbiBpbml0aWFsaXplZCwgYW5kIHRvIGhlbHAgY2FsY3VsYXRlIHRoZSBoZWlnaHQgb2ZcbiAgICAgKiB0aGUgc2Nyb2xsYWJsZSBhcmVhLiBUaGlzIGhlaWdodCB2YWx1ZSBjYW4gb25seSB1c2UgYHB4YCB1bml0cy5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIGFjdHVhbCByZW5kZXJlZCBzaXplIG9mIGVhY2ggY2VsbCBjb21lcyBmcm9tIHRoZVxuICAgICAqIGFwcCdzIENTUywgd2hlcmVhcyB0aGlzIGFwcHJveGltYXRpb24gaXMgdXNlZCB0byBoZWxwIGNhbGN1bGF0ZVxuICAgICAqIGluaXRpYWwgZGltZW5zaW9ucyBiZWZvcmUgdGhlIGl0ZW0gaGFzIGJlZW4gcmVuZGVyZWQuXG4gICAgICovXG4gICAgYXBwcm94SXRlbUhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBhcHByb3hpbWF0ZSBoZWlnaHQgb2YgZWFjaCBoZWFkZXIgdGVtcGxhdGUncyBjZWxsLlxuICAgICAqIFRoaXMgZGltZW5zaW9uIGlzIHVzZWQgdG8gaGVscCBkZXRlcm1pbmUgaG93IG1hbnkgY2VsbHMgc2hvdWxkXG4gICAgICogYmUgY3JlYXRlZCB3aGVuIGluaXRpYWxpemVkLCBhbmQgdG8gaGVscCBjYWxjdWxhdGUgdGhlIGhlaWdodCBvZlxuICAgICAqIHRoZSBzY3JvbGxhYmxlIGFyZWEuIFRoaXMgaGVpZ2h0IHZhbHVlIGNhbiBvbmx5IHVzZSBgcHhgIHVuaXRzLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYWN0dWFsIHJlbmRlcmVkIHNpemUgb2YgZWFjaCBjZWxsIGNvbWVzIGZyb20gdGhlXG4gICAgICogYXBwJ3MgQ1NTLCB3aGVyZWFzIHRoaXMgYXBwcm94aW1hdGlvbiBpcyB1c2VkIHRvIGhlbHAgY2FsY3VsYXRlXG4gICAgICogaW5pdGlhbCBkaW1lbnNpb25zIGJlZm9yZSB0aGUgaXRlbSBoYXMgYmVlbiByZW5kZXJlZC5cbiAgICAgKi9cbiAgICBhcHByb3hIZWFkZXJIZWlnaHQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgYXBwcm94aW1hdGUgd2lkdGggb2YgZWFjaCBmb290ZXIgdGVtcGxhdGUncyBjZWxsLlxuICAgICAqIFRoaXMgZGltZW5zaW9uIGlzIHVzZWQgdG8gaGVscCBkZXRlcm1pbmUgaG93IG1hbnkgY2VsbHMgc2hvdWxkXG4gICAgICogYmUgY3JlYXRlZCB3aGVuIGluaXRpYWxpemVkLCBhbmQgdG8gaGVscCBjYWxjdWxhdGUgdGhlIGhlaWdodCBvZlxuICAgICAqIHRoZSBzY3JvbGxhYmxlIGFyZWEuIFRoaXMgaGVpZ2h0IHZhbHVlIGNhbiBvbmx5IHVzZSBgcHhgIHVuaXRzLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYWN0dWFsIHJlbmRlcmVkIHNpemUgb2YgZWFjaCBjZWxsIGNvbWVzIGZyb20gdGhlXG4gICAgICogYXBwJ3MgQ1NTLCB3aGVyZWFzIHRoaXMgYXBwcm94aW1hdGlvbiBpcyB1c2VkIHRvIGhlbHAgY2FsY3VsYXRlXG4gICAgICogaW5pdGlhbCBkaW1lbnNpb25zIGJlZm9yZSB0aGUgaXRlbSBoYXMgYmVlbiByZW5kZXJlZC5cbiAgICAgKi9cbiAgICBhcHByb3hGb290ZXJIZWlnaHQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTZWN0aW9uIGhlYWRlcnMgYW5kIHRoZSBkYXRhIHVzZWQgd2l0aGluIGl0cyBnaXZlblxuICAgICAqIHRlbXBsYXRlIGNhbiBiZSBkeW5hbWljYWxseSBjcmVhdGVkIGJ5IHBhc3NpbmcgYSBmdW5jdGlvbiB0byBgaGVhZGVyRm5gLlxuICAgICAqIEZvciBleGFtcGxlLCBhIGxhcmdlIGxpc3Qgb2YgY29udGFjdHMgdXN1YWxseSBoYXMgZGl2aWRlcnMgYmV0d2VlbiBlYWNoXG4gICAgICogbGV0dGVyIGluIHRoZSBhbHBoYWJldC4gQXBwJ3MgY2FuIHByb3ZpZGUgdGhlaXIgb3duIGN1c3RvbSBgaGVhZGVyRm5gXG4gICAgICogd2hpY2ggaXMgY2FsbGVkIHdpdGggZWFjaCByZWNvcmQgd2l0aGluIHRoZSBkYXRhc2V0LiBUaGUgbG9naWMgd2l0aGluXG4gICAgICogdGhlIGhlYWRlciBmdW5jdGlvbiBjYW4gZGVjaWRlIGlmIHRoZSBoZWFkZXIgdGVtcGxhdGUgc2hvdWxkIGJlIHVzZWQsXG4gICAgICogYW5kIHdoYXQgZGF0YSB0byBnaXZlIHRvIHRoZSBoZWFkZXIgdGVtcGxhdGUuIFRoZSBmdW5jdGlvbiBtdXN0IHJldHVyblxuICAgICAqIGBudWxsYCBpZiBhIGhlYWRlciBjZWxsIHNob3VsZG4ndCBiZSBjcmVhdGVkLlxuICAgICAqL1xuICAgIGhlYWRlckZuPzogSGVhZGVyRm47XG4gICAgLyoqXG4gICAgICogU2VjdGlvbiBmb290ZXJzIGFuZCB0aGUgZGF0YSB1c2VkIHdpdGhpbiBpdHMgZ2l2ZW5cbiAgICAgKiB0ZW1wbGF0ZSBjYW4gYmUgZHluYW1pY2FsbHkgY3JlYXRlZCBieSBwYXNzaW5nIGEgZnVuY3Rpb24gdG8gYGZvb3RlckZuYC5cbiAgICAgKiBUaGUgbG9naWMgd2l0aGluIHRoZSBmb290ZXIgZnVuY3Rpb24gY2FuIGRlY2lkZSBpZiB0aGUgZm9vdGVyIHRlbXBsYXRlXG4gICAgICogc2hvdWxkIGJlIHVzZWQsIGFuZCB3aGF0IGRhdGEgdG8gZ2l2ZSB0byB0aGUgZm9vdGVyIHRlbXBsYXRlLiBUaGUgZnVuY3Rpb25cbiAgICAgKiBtdXN0IHJldHVybiBgbnVsbGAgaWYgYSBmb290ZXIgY2VsbCBzaG91bGRuJ3QgYmUgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBmb290ZXJGbj86IEhlYWRlckZuO1xuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhIHRoYXQgYnVpbGRzIHRoZSB0ZW1wbGF0ZXMgd2l0aGluIHRoZSB2aXJ0dWFsIHNjcm9sbC5cbiAgICAgKiBJdCdzIGltcG9ydGFudCB0byBub3RlIHRoYXQgd2hlbiB0aGlzIGRhdGEgaGFzIGNoYW5nZWQsIHRoZW4gdGhlXG4gICAgICogZW50aXJlIHZpcnR1YWwgc2Nyb2xsIGlzIHJlc2V0LCB3aGljaCBpcyBhbiBleHBlbnNpdmUgb3BlcmF0aW9uIGFuZFxuICAgICAqIHNob3VsZCBiZSBhdm9pZGVkIGlmIHBvc3NpYmxlLlxuICAgICAqL1xuICAgIGl0ZW1zPzogYW55W107XG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBtYXBzIGVhY2ggaXRlbSB3aXRoaW4gdGhlaXIgaGVpZ2h0LlxuICAgICAqIFdoZW4gdGhpcyBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaGVhdnkgb3B0aW1pemF0aW9ucyBhbmQgZmFzdCBwYXRoIGNhbiBiZSB0YWtlZCBieVxuICAgICAqIGBpb24tdmlydHVhbC1zY3JvbGxgIGxlYWRpbmcgdG8gbWFzc2l2ZSBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGFsbG93cyB0byBza2lwIGFsbCBET00gcmVhZHMsIHdoaWNoIGNhbiBiZSBEb2luZyBzbyBsZWFkc1xuICAgICAqIHRvIG1hc3NpdmUgcGVyZm9ybWFuY2VcbiAgICAgKi9cbiAgICBpdGVtSGVpZ2h0PzogSXRlbUhlaWdodEZuO1xuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgbWFwcyBlYWNoIGl0ZW0gaGVhZGVyIHdpdGhpbiB0aGVpciBoZWlnaHQuXG4gICAgICovXG4gICAgaGVhZGVySGVpZ2h0PzogSGVhZGVySGVpZ2h0Rm47XG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBtYXBzIGVhY2ggaXRlbSBmb290ZXIgd2l0aGluIHRoZWlyIGhlaWdodC5cbiAgICAgKi9cbiAgICBmb290ZXJIZWlnaHQ/OiBGb290ZXJIZWlnaHRGbjtcbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIGBuZ0ZvclRyYWNrQnlgIHdoaWNoIGNhbiBiZSB1c2VkIG9uIGBuZ0ZvcmAuXG4gICAgICovXG4gICAgdHJhY2tCeTogVHJhY2tCeUZ1bmN0aW9uPGFueT47XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgbWFya3MgdGhlIHRhaWwgdGhlIGl0ZW1zIGFycmF5IGFzIGRpcnR5LCBzbyB0aGV5IGNhbiBiZSByZS1yZW5kZXJlZC4gIEl0J3MgZXF1aXZhbGVudCB0byBjYWxsaW5nOiAgYGBganMgICAgKiB2aXJ0dWFsU2Nyb2xsLmNoZWNrUmFuZ2UobGFzdEl0ZW1MZW4sIGl0ZW1zLmxlbmd0aCAtIGxhc3RJdGVtTGVuKTsgICAgKiBgYGBcbiAgICAgKi9cbiAgICAnY2hlY2tFbmQnOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIG1hcmtzIGEgc3Vic2V0IG9mIGl0ZW1zIGFzIGRpcnR5LCBzbyB0aGV5IGNhbiBiZSByZS1yZW5kZXJlZC4gSXRlbXMgc2hvdWxkIGJlIG1hcmtlZCBhcyBkaXJ0eSBhbnkgdGltZSB0aGUgY29udGVudCBvciB0aGVpciBzdHlsZSBjaGFuZ2VzLiAgVGhlIHN1YnNldCBvZiBpdGVtcyB0byBiZSB1cGRhdGVkIGNhbiBhcmUgc3BlY2lmaW5nIGJ5IGFuIG9mZnNldCBhbmQgYSBsZW5ndGguXG4gICAgICovXG4gICAgJ2NoZWNrUmFuZ2UnOiAob2Zmc2V0OiBudW1iZXIsIGxlbj86IG51bWJlcikgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgdmlydHVhbCBpdGVtIGF0IHRoZSBnaXZlbiBpbmRleC5cbiAgICAgKi9cbiAgICAncG9zaXRpb25Gb3JJdGVtJzogKGluZGV4OiBudW1iZXIpID0+IFByb21pc2U8bnVtYmVyPjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElvblZpcnR1YWxTY3JvbGwge1xuICAgIHByaXZhdGUgejtcbiAgICBwcml2YXRlIGl0ZXJhYmxlRGlmZmVycztcbiAgICBwcml2YXRlIGRpZmZlcj87XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIHJlZk1hcDtcbiAgICBpdG1UbXA6IFZpcnR1YWxJdGVtO1xuICAgIGhkclRtcDogVmlydHVhbEhlYWRlcjtcbiAgICBmdHJUbXA6IFZpcnR1YWxGb290ZXI7XG4gICAgY29uc3RydWN0b3IoejogTmdab25lLCBpdGVyYWJsZURpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywgZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBub2RlUmVuZGVyO1xuICAgIHByaXZhdGUgZ2V0Q29tcG9uZW50O1xufVxuIl19